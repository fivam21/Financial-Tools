# Jump diffusion process for simulating stock returns
import matplotlib.pyplot as plt
import numpy as np
import math

M = 50 #steps
T = 1
I = 10000 #no. simulations
lamb = 0.75 #jump intensity
mu = -0.6 #mean jump size
delta = 0.25 #jump vol
r = 0.04
sigma = 0.2
S0 = 100

dt = 30. / 365 / M
rj = lamb * (math.exp(mu + 0.5 * delta ** 2) - 1) # drift correction

S = np.zeros((M+1, I))
S[0] = S0
sn1 = np.random.standard_normal((M+1, I))
sn2 = np.random.standard_normal((M+1, I))
pois = np.random.poisson(lamb * dt, (M+1, I))
# Simulation based on the exact Euler Scheme
for t in range(1, M+1, 1):
    S[t] = S[t-1] * (np.exp((r - rj - 0.5 * sigma ** 2) * dt + sigma * math.sqrt(dt) * sn1[t])
                     + (np.exp(mu + delta * sn2[t]) - 1) * pois[t])
    S[t] = np.maximum(S[t], 0)

R_jd = np.sort(S[-1] - S0)

plt.figure(figsize=(10,6))
plt.hist(R_jd, bins = 50)
# plt.xlim(-100,-10) viewing left tail performance
# plt.ylim(0,100)
plt.xlabel('Absolute Return (%)')
plt.ylabel('Frequency')
plt.show()
